diff --git a/spermsim/initialization.py b/spermsim/initialization.py
index 5c4bde5d8e42708129210f889db868f385b94800..a7e7bea5222e686d72048c591ed8876dbcb40600 100644
--- a/spermsim/initialization.py
+++ b/spermsim/initialization.py
@@ -370,51 +370,51 @@ class SimApp:
         ttk.Label(parent, text="sim_repeat:").pack(anchor="w", padx=10, pady=(10, 0))
         f_repeat = ttk.Frame(parent); f_repeat.pack(anchor="w", padx=30)
         for v in [1, 3, 10, 30]:
             ttk.Radiobutton(f_repeat, text=str(v), variable=self.tk_vars["sim_repeat"],
                             value=int(v)).pack(side="left")
 
         # --- display_mode ラジオボタン ------------------------------
         # ini ファイルからの正しい読み込み方法
         display_mode = self.config_data.get('display_mode', '2D')
 
         # 万が一、タプルになっている場合を考えて厳密に処理
         if isinstance(display_mode, tuple):
             display_mode = display_mode[0]
         elif isinstance(display_mode, list):
             display_mode = display_mode[0]
 
         # 念のために文字列変換と空白削除
         display_mode = str(display_mode).strip().replace('(', '').replace(')', '').replace(',', '').replace("'", "").replace('"', '')
 
         display_mode = self.config_data.get('display_mode', '2D')
 
         # ✅ リストやタプルだった場合に文字列に変換
         if isinstance(display_mode, (list, tuple)):
             display_mode = display_mode[0]
 
-        display_mode = str(display_mode).strip().lower()  # "movie" や "3d" の整形
+        display_mode = str(display_mode).strip()  # "movie" や "3D" をそのまま保持
         self.tk_vars["display_mode"] = tk.StringVar(value=display_mode)
 
 
         ttk.Label(parent, text="display_mode:").pack(anchor="w", padx=10, pady=(10, 0))
         f_disp = ttk.Frame(parent)
         f_disp.pack(anchor="w", padx=30)
 
         for v in ["2D", "3D", "movie"]:
             ttk.Radiobutton(
                 f_disp, text=v, variable=self.tk_vars["display_mode"], value=v
             ).pack(side="left")
 
         # 最終確認のプリント文
         print(f"最終修正後の表示モード: {self.tk_vars['display_mode'].get()}")
 
         # --- 実行ボタン --------------------------------------------------
         ttk.Button(parent, text="Save settings and run simulation",
                    command=self._on_save).pack(pady=20)
 
         self._update_spot_angle_state()
     # ---------------------------------------------------------------------
     # spot_angle の有効／無効
     # ---------------------------------------------------------------------
     def _update_spot_angle_state(self) -> None:
         enable = (self.tk_vars["shape"].get() == "spot")
diff --git a/spermsim/initialization.py b/spermsim/initialization.py
index 5c4bde5d8e42708129210f889db868f385b94800..a7e7bea5222e686d72048c591ed8876dbcb40600 100644
--- a/spermsim/initialization.py
+++ b/spermsim/initialization.py
@@ -428,51 +428,51 @@ class SimApp:
 
     def _on_save(self):
         from tools.derived_constants import calculate_derived_constants
         from tools.ini_handler import save_config
 
         # GUIフォームから値を取得
         constants = {key: var.get() for key, var in self.tk_vars.items()}
         print("[DEBUGggg] GUIから取得した display_mode =", constants.get("display_mode"))
         # --- 数値変換 ---
         constants["gamete_r"] = float(constants["gamete_r"])
         constants["vol"] = float(constants["vol"])
         constants["vsl"] = float(constants["vsl"])
         constants["deviation"] = float(constants["deviation"])
         constants["surface_time"] = float(constants["surface_time"])
         constants["sperm_conc"] = float(constants["sperm_conc"])
         constants["spot_angle"] = float(constants["spot_angle"])
         constants["sample_rate_hz"] = float(constants["sample_rate_hz"])
         constants["sim_min"] = float(constants["sim_min"])
         constants["sim_repeat"] = int(constants["sim_repeat"])
         constants["seed_number"] = int(constants["seed_number"]) if constants["seed_number"] != "None" else "None"
 
         # --- display_mode を正規化（例: ["Movie"] → "Movie"） ---
         raw_mode = constants.get("display_mode", "2D")
         while isinstance(raw_mode, list) or isinstance(raw_mode, tuple):
             raw_mode = raw_mode[0]
-        constants["display_mode"] = str(raw_mode).strip("()'\" ").lower()
+        constants["display_mode"] = str(raw_mode).strip("()'\" ")
 
 
         # --- 派生変数計算 ---
         constants = calculate_derived_constants(constants)
 
         # --- 設定を保存 ---
         save_config(constants)
         print("[SimApp] 設定を sperm_config.ini に保存しました")
         print(f"[DEBUG] 保存された display_mode: {constants['display_mode']}")
 
         # --- GUI終了 ---
         self.root.destroy()
 
 
 # ---------------------------------------------------------------------------
 # エントリーポイント
 # ---------------------------------------------------------------------------
 
 if __name__ == "__main__":
     print("[DEBUG] starting SimApp ...")
     root = tk.Tk()
     app = SimApp(root)
     root.mainloop()
 
     app.mainloop()
