diff --git a/spermsim/initialization.py b/spermsim/initialization.py
index 26bc2083349634983893cdc4260fe40134b5156b..f4612279390bb4d7d97556db32685f22b5c8742d 100644
--- a/spermsim/initialization.py
+++ b/spermsim/initialization.py
@@ -122,51 +122,51 @@ def calculate_derived_constants(raw_constants):
     if "spot_r" in constants:
         r_raw = float(constants["spot_r"])
         constants["spot_r"] = r_raw / 1000.0 if r_raw > 10 else r_raw
     if "spot_bottom_r" in constants:
         br_raw = float(constants["spot_bottom_r"])
         constants["spot_bottom_r"] = br_raw / 1000.0 if br_raw > 10 else br_raw
     if "spot_bottom_height" in constants:
         bh_raw = float(constants["spot_bottom_height"])
         constants["spot_bottom_height"] = bh_raw / 1000.0 if bh_raw > 10 else bh_raw
 
     if shape == "spot":
         angle_deg = float(constants.get("spot_angle", 0.0))
         spot_r_mm, bottom_r_mm, bottom_h_mm = calc_spot_geometry(vol, angle_deg)
         constants["spot_r"] = spot_r_mm
         constants["spot_bottom_r"] = bottom_r_mm
         constants["spot_bottom_height"] = bottom_h_mm
 
     if shape == "cube":
         edge = vol ** (1.0 / 3.0)
         constants["edge"] = edge
 
     vsl_um_s = float(constants.get("vsl", 0.0))  # GUI value in Âµm/s
     sample_rate_hz = float(constants.get("sample_rate_hz", 0.0))
     vsl_mm_s = vsl_um_s / 1000.0
     constants["vsl"] = vsl_mm_s
-    constants["step_length"] = vsl_mm_s / sample_rate_hz if sample_rate_hz else 0.0
+    constants["step_length"] = (vsl_um_s * sample_rate_hz) / 1000.0
 
     if "vol" in constants and "sperm_conc" in constants:
         try:
             vol_ul = float(constants["vol"])
             conc = float(constants["sperm_conc"])
             constants["number_of_sperm"] = int(conc * vol_ul / 1000)
         except Exception:
             pass
 
     if shape == "cube":
         half = constants["edge"] / 2
         constants.update(
             x_min=-half, x_max=half,
             y_min=-half, y_max=half,
             z_min=0.0,   z_max=constants["edge"]
         )
     elif shape == "drop":
         r = constants["drop_r"]
         constants.update(
             x_min=-r, x_max=r,
             y_min=-r, y_max=r,
             z_min=-r, z_max=r
         )
     elif shape == "spot":
         R = constants["spot_r"]
