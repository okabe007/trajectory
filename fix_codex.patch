diff --git a/tools/geometry.py b/tools/geometry.py
index d59c5fe109a221ffb9131f17dc9b667e2f0de10b..e7cb9aff158f01a3a175c313d27501c10e65983f 100644
--- a/tools/geometry.py
+++ b/tools/geometry.py
@@ -1,29 +1,31 @@
 import numpy as np
 from numpy import linalg as LA
 from typing import Dict      # ★ この行を追加
 from typing import Tuple
+from tools.enums import IOStatus as EnumIOStatus
+from tools.io_checks import IO_check_spot
 
 def bend_along_sphere_surface(vec: np.ndarray, normal: np.ndarray, angle_rad: float) -> np.ndarray:
     """
     接線ベクトル `vec` を、球面の法線 `normal` に沿って `angle_rad` ラジアンだけ
     内側（球の中心方向）に曲げた新しい単位ベクトルを返す。
 
     Parameters
     ----------
     vec : np.ndarray
         現在の進行方向ベクトル（正規化されていなくてもOK）
     normal : np.ndarray
         球面の法線ベクトル（原点中心 → 接触点方向）※正規化されていることを推奨
     angle_rad : float
         接線から法線に向かって回転させる角度（ラジアン）
 
     Returns
     -------
     np.ndarray
         曲げた後の正規化済み方向ベクトル
     """
     # vec と normal で張る平面内で回転
     # tangent: vec から normal 成分を除いた接線ベクトル
     tangent = vec - np.dot(vec, normal) * normal
     tangent /= np.linalg.norm(tangent) + 1e-12
 
diff --git a/tools/geometry.py b/tools/geometry.py
index d59c5fe109a221ffb9131f17dc9b667e2f0de10b..e7cb9aff158f01a3a175c313d27501c10e65983f 100644
--- a/tools/geometry.py
+++ b/tools/geometry.py
@@ -82,55 +84,50 @@ def _handle_drop_outside(
     max_iterations = 100  # 無限ループ防止
     iteration = 0
 
     while iteration < max_iterations:
         intersect, remain = _line_sphere_intersection(
             base_pos, base_pos + vec, constants["drop_r"]
         )
         normal = intersect / (np.linalg.norm(intersect) + 1e-12)
 
         vec = bend_along_sphere_surface(vec, normal, angle_rad)
         base_pos = intersect
         candidate = base_pos + vec * remain
 
         status = _io_check_drop(candidate, constants, base_pos)
 
         if status == "inside":
             break
         elif stick_status == 0:
             stick_status = int(surface_time * sample_rate_hz)
             break
 
         iteration += 1
 
     return vec, base_pos, stick_status
 
-class IOStatus:
-    INSIDE = "inside"
-    TEMP_ON_SURFACE = "temp_on_surface"
-    TEMP_ON_EDGE = "temp_on_edge"
-    OUTSIDE = "outside"
 
 class BaseShape:
     def __init__(self, constants):
         self.constants = constants
 
     def get_limits(self):
         # ここで一括管理（すべてのShapeはこのまま継承）
         keys = ['x_min', 'x_max', 'y_min', 'y_max', 'z_min', 'z_max']
         return tuple(float(self.constants[k]) for k in keys)
 
     def io_check(self, *args, **kwargs):
         raise NotImplementedError
 
     def initial_position(self):
         raise NotImplementedError
 
 
 class CubeShape(BaseShape):
     """
     立方体形状
     - constants に
         • "vol"      : 体積 [µL]          (従来)
         • "vol_um3"  : 体積 [µm³] ←★追加
       のどちらかが入っていれば初期化できます。
     - 計算した一辺長 edge_um, limits は self.constants に追記。
diff --git a/tools/geometry.py b/tools/geometry.py
index d59c5fe109a221ffb9131f17dc9b667e2f0de10b..e7cb9aff158f01a3a175c313d27501c10e65983f 100644
--- a/tools/geometry.py
+++ b/tools/geometry.py
@@ -159,103 +156,107 @@ class CubeShape(BaseShape):
         # derived_constants.calculate_derived_constants で x_min などが
         # 既に mm 単位で計算されている場合はそれを尊重する。
         limit_keys = ["x_min", "x_max", "y_min", "y_max", "z_min", "z_max"]
         if not all(k in self.constants for k in limit_keys):
             # 派生値が無い場合のみここで計算する（mm単位）
             half_mm = edge_mm / 2.0
             self.constants.update({
                 "x_min": -half_mm, "x_max": half_mm,
                 "y_min": -half_mm, "y_max": half_mm,
                 "z_min": -half_mm, "z_max": half_mm,
             })
         # edge_um は常に保存しておく
         self.constants["edge_um"] = edge_um
         # -------------------------------------------------------------
 
     # ------------- 以降は Masaru さんの元コードをそのまま残す -------------
     def initial_position(self):
         x_min, x_max, y_min, y_max, z_min, z_max = self.get_limits()
         return np.random.uniform([x_min, y_min, z_min], [x_max, y_max, z_max])
 
     def io_check(self, point):
         x_min, x_max, y_min, y_max, z_min, z_max = self.get_limits()
         eps = 1e-9
         inside = (x_min < point[0] < x_max) and (y_min < point[1] < y_max) and (z_min < point[2] < z_max)
         if inside:
-            return IOStatus.INSIDE, None
+            return EnumIOStatus.INSIDE, None
         on_edge = (
             np.isclose([point[0]], [x_min, x_max], atol=eps).any() or
             np.isclose([point[1]], [y_min, y_max], atol=eps).any() or
             np.isclose([point[2]], [z_min, z_max], atol=eps).any()
         )
         if on_edge:
-            return IOStatus.TEMP_ON_EDGE, None
-        return IOStatus.OUTSIDE, None
+            return EnumIOStatus.TEMP_ON_EDGE, None
+        return EnumIOStatus.OUTSIDE, None
 
 class DropShape(BaseShape):
     def initial_position(self):
         R = float(self.constants['drop_r'])
         theta = np.arccos(2 * np.random.rand() - 1)
         phi = np.random.uniform(-np.pi, np.pi)
         s = R * np.random.rand() ** (1/3)
         x = s * np.sin(theta) * np.cos(phi)
         y = s * np.sin(theta) * np.sin(phi)
         z = s * np.cos(theta)
         return np.array([x, y, z])
 
     def io_check(self, point, stick_status):
         R = float(self.constants["drop_r"])
         if point[2] < 0:
-            return IOStatus.OUTSIDE
+            return EnumIOStatus.OUTSIDE
         norm = np.linalg.norm(point)
         if norm < R:
-            return IOStatus.INSIDE
+            return EnumIOStatus.INSIDE
         if np.isclose(norm, R, atol=1e-9):
-            return IOStatus.TEMP_ON_SURFACE
-        return IOStatus.OUTSIDE
+            return EnumIOStatus.TEMP_ON_SURFACE
+        return EnumIOStatus.OUTSIDE
 
 class SpotShape(BaseShape):
     def initial_position(self):
         """Return a random point uniformly distributed inside a spherical cap."""
         radius = float(self.constants['spot_r'])
         angle_rad = np.deg2rad(float(self.constants['spot_angle']))
         cos_min = np.cos(angle_rad)
 
         while True:
             vec = np.random.normal(size=3)
             vec /= np.linalg.norm(vec) + 1e-12
             r = radius * (np.random.rand() ** (1 / 3))
             point = vec * r
             if point[2] >= radius * cos_min:
                 return point
 
-    def io_check(self, base_point, temp_point=None):
-        R = float(self.constants["radius"])
+    def io_check(self, base_point, temp_point=None, prev_stat=None, stick_status=0):
+        """Check I/O status using ``IO_check_spot`` for accurate boundary handling."""
         if temp_point is None:
-            return IOStatus.OUTSIDE
-        norm = np.linalg.norm(temp_point)
-        if norm < R:
-            return IOStatus.INSIDE
-        if np.isclose(norm, R, atol=1e-9):
-            return IOStatus.TEMP_ON_SURFACE
-        return IOStatus.OUTSIDE
+            return EnumIOStatus.OUTSIDE
+
+        # ``IO_check_spot`` performs detailed checks for the spherical cap,
+        # including the bottom plane and rim.
+        return IO_check_spot(
+            base_point,
+            temp_point,
+            self.constants,
+            prev_stat if prev_stat is not None else EnumIOStatus.INSIDE,
+            stick_status,
+        )
 
 class CerosShape(BaseShape):
     def initial_position(self):
         x_min, x_max, y_min, y_max, z_min, z_max = self.get_limits()
         return np.random.uniform([x_min, y_min, z_min], [x_max, y_max, z_max])
 
     def io_check(self, point):
         # cerosもcubeと同じ判定
         x_min, x_max, y_min, y_max, z_min, z_max = self.get_limits()
         eps = 1e-9
         inside = (x_min < point[0] < x_max) and (y_min < point[1] < y_max) and (z_min < point[2] < z_max)
         if inside:
-            return IOStatus.INSIDE, None
+            return EnumIOStatus.INSIDE, None
         on_edge = (
             np.isclose([point[0]], [x_min, x_max], atol=eps).any() or
             np.isclose([point[1]], [y_min, y_max], atol=eps).any() or
             np.isclose([point[2]], [z_min, z_max], atol=eps).any()
         )
         if on_edge:
-            return IOStatus.TEMP_ON_EDGE, None
-        return IOStatus.OUTSIDE, None
+            return EnumIOStatus.TEMP_ON_EDGE, None
+        return EnumIOStatus.OUTSIDE, None
